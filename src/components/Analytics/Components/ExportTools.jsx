import React, { useState } from 'react'
import SafeIcon from '../../../common/SafeIcon'
import * as FiIcons from 'react-icons/fi'

const { FiDownload, FiFileText, FiImage, FiDatabase, FiMail } = FiIcons

const ExportTools = ({ data, dateRange, filters }) => {
  const [isExporting, setIsExporting] = useState(false)
  const [showExportMenu, setShowExportMenu] = useState(false)

  const exportOptions = [
    {
      id: 'pdf',
      label: 'PDF Report',
      icon: FiFileText,
      description: 'Comprehensive analytics report'
    },
    {
      id: 'csv',
      label: 'CSV Data',
      icon: FiDatabase,
      description: 'Raw data for further analysis'
    },
    {
      id: 'png',
      label: 'Chart Images',
      icon: FiImage,
      description: 'Export charts as images'
    },
    {
      id: 'email',
      label: 'Email Report',
      icon: FiMail,
      description: 'Send report via email'
    }
  ]

  const handleExport = async (type) => {
    setIsExporting(true)
    setShowExportMenu(false)

    try {
      switch (type) {
        case 'pdf':
          await exportToPDF()
          break
        case 'csv':
          await exportToCSV()
          break
        case 'png':
          await exportCharts()
          break
        case 'email':
          await emailReport()
          break
        default:
          console.warn('Unknown export type:', type)
      }
    } catch (error) {
      console.error('Export failed:', error)
      alert('Export failed. Please try again.')
    } finally {
      setIsExporting(false)
    }
  }

  const exportToPDF = async () => {
    // Simulate PDF generation
    console.log('📄 Generating PDF report...')
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    // Create a simple text report for demo
    const reportContent = generateReportContent()
    const blob = new Blob([reportContent], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    
    const link = document.createElement('a')
    link.href = url
    link.download = `regravity-analytics-report-${new Date().toISOString().split('T')[0]}.txt`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
    
    console.log('✅ PDF report downloaded')
  }

  const exportToCSV = async () => {
    console.log('📊 Generating CSV data...')
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    // Generate CSV content
    const csvContent = generateCSVContent()
    const blob = new Blob([csvContent], { type: 'text/csv' })
    const url = URL.createObjectURL(blob)
    
    const link = document.createElement('a')
    link.href = url
    link.download = `regravity-analytics-data-${new Date().toISOString().split('T')[0]}.csv`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
    
    console.log('✅ CSV data downloaded')
  }

  const exportCharts = async () => {
    console.log('🖼️ Exporting charts...')
    await new Promise(resolve => setTimeout(resolve, 1500))
    
    // In a real implementation, you would capture chart elements
    alert('Chart export feature would capture and download chart images. This requires additional libraries like html2canvas.')
    
    console.log('✅ Charts exported')
  }

  const emailReport = async () => {
    console.log('📧 Preparing email report...')
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    // In a real implementation, you would integrate with email service
    const reportSummary = generateReportSummary()
    alert(`Email report feature would send this summary:\n\n${reportSummary}`)
    
    console.log('✅ Email report sent')
  }

  const generateReportContent = () => {
    return `
REGRAVITY ANALYTICS REPORT
Generated: ${new Date().toLocaleString()}
Date Range: ${dateRange}

SUMMARY:
- Total Revenue: $${data.kpis?.totalRevenue?.toLocaleString() || 0}
- Active Users: ${data.kpis?.activeUsers?.toLocaleString() || 0}
- Total Orders: ${data.kpis?.totalOrders?.toLocaleString() || 0}
- Average Order Value: $${data.kpis?.avgOrderValue?.toLocaleString() || 0}

FILTERS APPLIED:
- Account Type: ${filters.accountType}
- Region: ${filters.region}
- Status: ${filters.status}

This report was generated by the Regravity Analytics System.
For more detailed analysis, please visit the dashboard.
    `.trim()
  }

  const generateCSVContent = () => {
    const headers = ['Metric', 'Value', 'Change']
    const rows = [
      ['Total Revenue', data.kpis?.totalRevenue || 0, data.kpis?.revenueChange || 0],
      ['Active Users', data.kpis?.activeUsers || 0, data.kpis?.userChange || 0],
      ['Total Orders', data.kpis?.totalOrders || 0, data.kpis?.orderChange || 0],
      ['Avg Order Value', data.kpis?.avgOrderValue || 0, data.kpis?.aovChange || 0]
    ]
    
    return [headers, ...rows].map(row => row.join(',')).join('\n')
  }

  const generateReportSummary = () => {
    return `
Analytics Summary for ${dateRange}:

📊 Key Metrics:
• Revenue: $${data.kpis?.totalRevenue?.toLocaleString() || 0}
• Users: ${data.kpis?.activeUsers?.toLocaleString() || 0}
• Orders: ${data.kpis?.totalOrders?.toLocaleString() || 0}

📈 Growth:
• Revenue: ${data.kpis?.revenueChange || 0}%
• Users: ${data.kpis?.userChange || 0}%
• Orders: ${data.kpis?.orderChange || 0}%

Generated by Regravity Analytics
    `.trim()
  }

  return (
    <div className="relative">
      <button
        onClick={() => setShowExportMenu(!showExportMenu)}
        disabled={isExporting}
        className="bg-primary-600 text-white px-4 py-2 rounded-lg hover:bg-primary-700 disabled:opacity-50 flex items-center space-x-2"
      >
        <SafeIcon icon={FiDownload} className="h-4 w-4" />
        <span>{isExporting ? 'Exporting...' : 'Export'}</span>
      </button>

      {showExportMenu && (
        <div className="absolute right-0 top-full mt-2 w-64 bg-white rounded-lg shadow-lg border z-10">
          <div className="p-2">
            {exportOptions.map((option) => (
              <button
                key={option.id}
                onClick={() => handleExport(option.id)}
                className="w-full flex items-start space-x-3 p-3 text-left hover:bg-gray-50 rounded-lg transition-colors"
              >
                <SafeIcon icon={option.icon} className="h-5 w-5 text-gray-500 mt-0.5" />
                <div>
                  <div className="font-medium text-gray-900">{option.label}</div>
                  <div className="text-sm text-gray-500">{option.description}</div>
                </div>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Overlay to close menu */}
      {showExportMenu && (
        <div
          className="fixed inset-0 z-0"
          onClick={() => setShowExportMenu(false)}
        />
      )}
    </div>
  )
}

export default ExportTools